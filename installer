#!/bin/sh

DNSCRYPT_VER=2.0.0

BOLD="\033[1m"
NORM="\033[0m"
INFO="$BOLD Info: $NORM"
ERROR="$BOLD *** Error: $NORM"
WARNING="$BOLD * Warning: $NORM"
INPUT="$BOLD => $NORM"

_quote() {
  echo $1 | sed 's/[]\/()$*.^|[]/\\&/g'
}

check_jffs_enabled () {
  if [ "`nvram get jffs2_format`" == "1" ]; then
    echo -e "$ERROR JFFS partition is scheduled to be reformatted"
    echo -e "$ERROR Please reboot to format or disable that setting and try again. Exiting..."
    exit 1
  fi

  JFFS2_ENABLED=`nvram get jffs2_enable`
  JFFS2_SCRIPTS=`nvram get jffs2_scripts`

  if [ $JFFS2_ENABLED -ne 1 ] || [ $JFFS2_SCRIPTS -ne 1 ]; then
    echo -e "$INFO JFFS custom scripts and configs are not enabled. Enabling them"
    nvram set jffs2_enable=1
    nvram set jffs2_scripts=1
    nvram commit
  else
    echo -e "$INFO JFFS custom scripts and configs are already enabled"
  fi
}

check_swap () {
  SWAP_SIZE=`cat /proc/meminfo | grep SwapTotal | awk '{print $2}'`
  if [ $SWAP_SIZE -gt 0 ]; then
    echo -e "$INFO Swap file is already setup"
    end_op_message 0
    return
  fi

  inst_swap
}

choose_dnscrypt_server () {
  yesno_query "Do you want to use DNS server over IPv6 (yes only if your connection has IPv6)" "toml_simple_var_write $TARG ipv6_servers true" "toml_simple_var_write $TARG ipv6_servers false"
  echo -e "$INFO Choose how your DNS servers are selected:"
  echo -e "  1) Automatically"
  echo -e "  2) Manually"
  read_input_num "Select your mode" 1 2
  case $CHOSEN in
    1)
      choose_dnscrypt_server_auto
      ;;
    2)
      choose_dnscrypt_server_manual
      ;;
  esac
}

choose_dnscrypt_server_auto () {
  local TARG=/jffs/dnscrypt/dnscrypt-proxy.toml

  toml_var_disable $TARG server_names
  yesno_query "Use servers support the DNSCrypt protocol" "toml_simple_var_write $TARG dnscrypt_servers true" "toml_simple_var_write $TARG dnscrypt_servers false"
  yesno_query "Use servers support the DNS-over-HTTPS protocol" "toml_simple_var_write $TARG doh_servers true" "toml_simple_var_write $TARG doh_servers false"
  yesno_query "Use only servers support DNSSEC" "toml_simple_var_write $TARG require_dnssec true" "toml_simple_var_write $TARG require_dnssec false"
  yesno_query "Use only servers that do not log user's queries" "toml_simple_var_write $TARG require_nolog true" "toml_simple_var_write $TARG require_nolog false"
  yesno_query "Use only servers that do not filter result" "toml_simple_var_write $TARG require_nofilter true" "toml_simple_var_write $TARG require_nofilter false"
}

choose_dnscrypt_server_manual () {
  local TARG=/jffs/dnscrypt/dnscrypt-proxy.toml
  if [ -z $1 ]; then
    toml_array_clean $TARG server_names
    toml_simple_var_write $TARG dnscrypt_servers true
    toml_simple_var_write $TARG doh_servers true
    toml_simple_var_write $TARG require_dnssec false
    toml_simple_var_write $TARG require_nolog "false"
    toml_simple_var_write $TARG require_nofilter "false"
    echo -e "$INFO Available DNS servers: "
    awk '/^## /{printf "  ";printf ++i ") " $2": " ;getline;print}' /jffs/dnscrypt/public-resolvers.md
    INDEX=`grep -c "^## " /jffs/dnscrypt/public-resolvers.md`
    read_input_num "Please choose DNS server" 1 $INDEX
  else
    read_input_num "Please choose next DNS server or press n to stop" 1 $INDEX n
    [ $? -eq 1 ] && return 0
  fi

  ITEM=`awk -v INDEX=$CHOSEN '/^## /{i++} i==INDEX {print $2;exit}' /jffs/dnscrypt/public-resolvers.md`
  toml_array_write $TARG server_names $ITEM

  [ "`echo $ITEM | grep cisco`" ] && CISCO_ENABLED=1
  choose_dnscrypt_server_manual n
}

cleanup () {
  local TARG=/jffs/dnscrypt
  rm -f $TARG/dnscrypt-fw-rules $TARG/dnscrypt-start $TARG/dnsmasq-dnscrypt-reconfig $TARG/fake-hwclock* $TARG/init-start $TARG/services-stop
}

create_dir () {
  mkdir -p "$1"
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to create $1!"
    return 1
  fi
}

del_between_magic () {
  local TARG=$1
  MAGIC=$2
  BOUNDS=`grep -n -F "$MAGIC" $TARG|cut -d':' -f1|tr '\n' ','`
  if [ "$BOUNDS" ]; then
    sed -i "${BOUNDS%,}d" $TARG
  fi
}

del_jffs_script () {
  local TARG=$1
  if [ "$2" == "x" ]; then
    LINE_NUM=`grep -n -F "[ -x /jffs/dnscrypt/" $TARG|grep -v manager|cut -d':' -f1`
  else
    LINE_NUM=`grep -n -F "[ -x /jffs/dnscrypt/" $TARG|cut -d':' -f1`
  fi
  [ -z $LINE_NUM ] && return
  sed -i "${LINE_NUM}d" $TARG
  if [ $LINE_NUM -gt 1 ]; then
    LINE_NUM=$((LINE_NUM-1))
    LINE_ABOVE=`sed "$LINE_NUMq;d" $TARG`
    [ -z "$LINE_ABOVE" ] && sed -i "${LINE_NUM}d" $TARG
  fi
}

download_file () {
  local TARG="$1"
  shift
  local PERM=$1
  shift

  for URL in "$@"; do
    FILENAME="`basename $URL`"
    MD5SUM_OLD="`[ -f $TARG/$FILENAME ] && md5sum $TARG/$FILENAME | cut -d' ' -f1`"
    MD5SUM_CURR="`curl -L -k -s \"${URL}.md5sum\"`"
    if [ `echo -n $MD5SUM_CURR | wc -c` -eq 32 ] && [ "$MD5SUM_CURR" ==  "$MD5SUM_OLD" ]; then
      echo -e "$INFO $FILENAME is up to date. Skipping..."
    else
      echo -e "$INFO Downloading $FILENAME"
      curl -L -k -s "$URL" -o $TARG/$FILENAME && chmod $PERM $TARG/$FILENAME
    fi
  done
}

end_op_message () {
  [ "$1" == "0" ] && echo -e "$INFO Operation completed. You can quit or continue"
  echo =====================================================
  echo
  echo
  menu
}

inst_dnscrypt () {
  local DNSCRYPT_TAR=dnscrypt-proxy-${DNSCRYPT_ARCH}-${DNSCRYPT_VER}.tar.gz
  local RESOLVERS_URL_PREFIX="http://download.dnscrypt.info/resolvers-list/v2"
  local TARG=/jffs/dnscrypt
  create_dir $TARG
  if [ $? -ne 0 ]; then
    end_op_message
    return 1
  fi

  download_file $TARG 755 $URL_GEN/manager $URL_ARCH/nonroot
  download_file $TARG 644 https://github.com/jedisct1/dnscrypt-proxy/releases/download/${DNSCRYPT_VER}/${DNSCRYPT_TAR} \
    $RESOLVERS_URL_PREFIX/public-resolvers.md \
    $RESOLVERS_URL_PREFIX/public-resolvers.md.minisig
  chown nobody:nobody $TARG/public-resolvers.md $TARG/public-resolvers.md.minisig
  tar xzv -C $TARG -f $TARG/$DNSCRYPT_TAR
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to download dnscrypt-proxy package for your router"
    end_op_message
    return 1
  fi
  chown `nvram get http_username`:root $TARG/$DNSCRYPT_ARCH_TAR/*
  mv $TARG/$DNSCRYPT_ARCH_TAR/* $TARG
  rm -r $TARG/$DNSCRYPT_ARCH_TAR $TARG/$DNSCRYPT_TAR
  chmod 755 $TARG/dnscrypt-proxy

  write_manager_script /jffs/scripts/dnsmasq.postconf dnsmasq
  write_manager_script /jffs/scripts/wan-start dnscrypt-start
  setup_dnscrypt
  if [ $? -ne 0 ]; then
    end_op_message
    return 1
  fi

  echo -e "$INFO For dnscrypt-proxy version 2 to work reliably, you might also want to:"
  echo -e "$INFO  - Add swap"
  echo -e "$INFO  - Add a RNG"
  echo -e "$INFO  - Set your timezone"
  end_op_message 0
}

inst_ip_update () {
  if [ "$1" -eq 0 ]; then
    write_conf OPENDNS_USER ""
    write_conf OPENDNS_PASSWORD ""
    return
  fi
  echo -en "$INPUT Please enter OpenDNS username$NORM: "
  read -r USERNAME
  echo -en "$INPUT Please enter OpenDNS password$NORM: "
  read -rs PW1
  echo
  echo -en "$INPUT Please reenter OpenDNS password$NORM: "
  read -rs PW2
  echo
  if [ "$PW1" != "$PW2" ]; then
    echo -e "$ERROR Password entered incorrectly!"
    inst_ip_update $1
  fi

  write_conf OPENDNS_USER "\"$USERNAME\""
  write_conf OPENDNS_PASSWORD "\"$PW1\""
}

inst_random () {
  local TARG=/jffs/dnscrypt
  create_dir $TARG

  if [ -z $1 ]; then
    echo -e "$INFO Install a (P)RNG for better cryptographic operations"
    echo -e "$INFO Available random number generator providers:"
    echo -e "  1) HAVEGED (Preferred if you do not have a HW RNG)"
    echo -e "  2) RNGD (Preferred if you have a HW RNG)"
  fi
  echo -e "$INFO If you choose a HW RNG, please have it plugged in now before"
  echo -e "$INFO proceeding with your selection."
  echo -en "$INPUT Please enter the number designates your selection$NORM: "
  read CHOSEN
  case $CHOSEN in
    1)
      rm -f rngd stty
      download_file $TARG 755 $URL_ARCH/haveged $URL_GEN/manager
      write_conf RAN_PRV haveged
      ;;
    2)
      rm -f haveged
      download_file $TARG 755 $URL_ARCH/rngd $URL_ARCH/stty $URL_GEN/manager
      inst_ran_dev || return
      write_conf RAN_PRV rngd
      ;;
    *)
      echo -e "$ERROR Invalid character entered! Retrying..."
      inst_random x
      return
      ;;
  esac

  write_manager_script /jffs/scripts/init-start init-start
  write_manager_script /jffs/scripts/services-stop services-stop
  end_op_message 0
}

inst_ran_dev () {
  if [ -c /dev/ttyACM0 ]; then
    PRODSTR=`cat /sys/class/tty/ttyACM0/device/uevent | grep ^PRODUCT\=`
    VID=`echo $PRODSTR | cut -d '=' -f 2 | cut -d '/' -f 1`
    PID=`echo $PRODSTR | cut -d '=' -f 2 | cut -d '/' -f 2`
    if [ "$VID" == "4d8" ] && [ "$PID" == "f5fe" ]; then
      echo -e "$INFO Found TrueRNG USB HW RNG"
      RNG_DEV=ttyACM0
    fi
    if [ "$VID" == "16d0" ] && [ "$PID" == "aa0" ]; then
      echo -e "$INFO Found TrueRNGpro USB HW RNG"
      RNG_DEV=ttyACM0
    fi
    if [ "$VID" == "1d50" ] && [ "$PID" == "6086" ]; then
      echo -e "$INFO Found OneRNG USB HW RNG"
      RNG_DEV=ttyACM0
    fi
    if [ "$VID" == "20df" ] && [ "$PID" == "1" ]; then
      echo -e "$INFO Found EntropyKey USB HW RNG"
      RNG_DEV=ttyACM0
    fi
  fi

  if [ -z $RNG_DEV ]; then
    echo -e "$ERROR Unable to find any HW RNG device! Retrying..."
    inst_random x
    return 1
  fi
  write_conf RNG_DEV "/dev/$RNG_DEV"
}

inst_swap () {
  local PARTITIONS

  SWAP_SIZE=524288
  USB_COUNT=`df | awk -v SWS=$(($SWAP_SIZE * 2)) '/\/tmp\/mnt\// {if ($4 > 524288){print $6}}' | wc -l`
  if [ $USB_COUNT -le 1 ]; then
    echo -e "$ERROR Unable to find any external USB storage"
    echo -e "$ERROR Or no suitable external USB storage found"
    echo -e "$ERROR Please connect a USB storage with at least"
    echo -e "$ERROR $(($SWAP_SIZE * 2 / 1024))MB of free space"
    end_op_message
    return 1
  fi

  echo -e "$INFO Available partition to install swap file:$NORM"
  df | awk -v SWS=$(($SWAP_SIZE * 2)) '/\/tmp\/mnt\// {if ($4 > SWS){++i; print "  " i ") " $6}}'
  read_input_num "Please select the partition to install swap file" 1 $USB_COUNT
  MOUNT=`df | awk -v IDX=$CHOSEN -v SWS=$(($SWAP_SIZE * 2)) '/\/tmp\/mnt\// {if ($4 > SWS){++i; if (i==IDX){print $6}}}'`

  echo -e "$INFO Please wait..."
  dd if=/dev/zero of="$MOUNT/swap" bs=1024 count=$SWAP_SIZE
  MOUNT_FS=`df -T "$MOUNT"|awk 'FNR==2 {print $2}'`
  [ ${MOUNT_FS%?} == "ext" ] && chmod 600 "$MOUNT/swap"
  mkswap "$MOUNT/swap"

  LINE_NUM=`grep -n '[ -f $1/swap ] && swap.* $1/swap' /jffs/scripts/post-mount | cut -d':' -f1`
  sed -i "${LINE_NUM}d" /jffs/scripts/post-mount
  LINE_NUM=`grep -n '[ -f $1/swap ] && swap.* $1/swap' /jffs/scripts/unmount | cut -d':' -f1`
  sed -i "${LINE_NUM}d" /jffs/scripts/unmount
  write_command_script /jffs/scripts/post-mount '[ -f "$1/swap" ] && swapon "$1/swap"'
  write_command_script /jffs/scripts/unmount '[ -f "$1/swap" ] && swapoff "$1/swap"'
  end_op_message 0
}

read_input_num () {
  if [ -z $4 ]; then
    echo -en "$INPUT $1, $BOLD[$2-$3]$NORM: "
  else
    echo -en "$INPUT $1, $BOLD[$2-$3/$4]$NORM: "
  fi
  read CHOSEN
  if [ "$CHOSEN" == "n" ]; then
    return 1
  fi
  if [ -z "`echo $CHOSEN | grep -E '^[0-9]+$'`" ]; then
    echo -e "$ERROR Invalid character entered! Retrying..."
    read_input_num "$@"
    return
  fi
  if [ $CHOSEN -lt $2 ] || [ $CHOSEN -gt $3 ] ; then
    echo -e "$ERROR Chosen number is not in range! Retrying..."
    read_input_num "$@"
    return
  fi
}

setup_dnscrypt () {
  local TARG_ORI=/jffs/dnscrypt/example-dnscrypt-proxy.toml
  local TARG=/jffs/dnscrypt/dnscrypt-proxy.toml
  if [ ! -f $TARG_ORI ] || [ ! -f /jffs/dnscrypt/dnscrypt-proxy ]; then
    echo -e "$ERROR dnscrypt-proxy is not installed. Aborting..."
    return 1
  fi
  cp -f $TARG_ORI $TARG

  echo -e "$INFO Configuring dnscrypt-proxy..."
  choose_dnscrypt_server
  [ "$CISCO_ENABLED" == "1" ] && yesno_query "Do you want to set up OpenDNS account ip update" "inst_ip_update 1" "inst_ip_update 0" || inst_ip_update 0

  echo -e "$INFO Set a DNS server for initializing dnscrypt-proxy"
  echo -e "$INFO and router services (e.g. ntp) at boot"
  echo -en "$INPUT Default is ${BOLD}8.8.8.8: $NORM"
  read DNS_SERVER
  [ -z $DNS_SERVER ] && DNS_SERVER=8.8.8.8
  toml_simple_var_write $TARG fallback_resolver "'$DNS_SERVER:53'"
  toml_simple_var_write $TARG ignore_system_dns "true"

  read_input_num "Set log level, default is 2, 0 is the most verbose" 0 6
  toml_simple_var_write $TARG log_level "$CHOSEN"

  toml_simple_var_write $TARG listen_addresses "['127.0.0.1:65053']"
  toml_simple_var_write $TARG use_syslog "true"
  toml_simple_var_write $TARG cache "false"
  toml_simple_var_write $TARG cert_ignore_timestamp "true"
  toml_simple_var_write $TARG daemonize "true"

  yesno_query "Do you want to redirect all DNS resolutions on your network through dnscrypt?" "write_manager_script /jffs/scripts/firewall-start fw-rules" "del_jffs_script /jffs/scripts/firewall-start"
}

setup_timezone () {
  local TARG=/jffs/dnscrypt
  local TMP=/root

  download_file $TMP 644 $URL_GEN/zoneinfo.zip
  INDEX=`unzip -lq $TMP/zoneinfo.zip | awk '!/(Name|[-\/])$/{if ($4){print $4}}' | wc -l`
  echo -e "$INFO Available timezones/locations:"
  unzip -lq $TMP/zoneinfo.zip | awk '!/(Name|[-\/])$/{if ($4){print $4}}' | sort | awk '{++i;print "  "i") "$0}'
  read_input_num "Select your timezone/location" 1 $INDEX

  TZ_FILE=`unzip -lq $TMP/zoneinfo.zip | awk '!/(Name|[-\/])$/{if ($4){print $4}}' | sort | awk -v INDEX=$CHOSEN '{++i}i==INDEX{print $0}'`
  unzip -p zoneinfo.zip $TZ_FILE > $TARG/localtime
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to set your timezone file"
    end_op_message
    return 1
  fi

  echo -e "$INFO $TZ_FILE selected"
  rm -r $TMP/zoneinfo.zip
  end_op_message 0
}

toml_array_clean () {
  local TARG=$1
  local VAR=$2

  LINE_NUM_LAST=`awk '/^\[.*\]/ {print NR;exit}' $TARG`
  IDX_LINE="`grep -n \"$VAR = \" $TARG`"
  if [ "$IDX_LINE" ] && [ `echo $IDX_LINE|cut -d':' -f1` -lt $LINE_NUM_LAST ]; then
    sed -i "/${VAR} = /c\\${VAR} = []" $1
  else
    LINE_NUM=$((`grep -n "#.*Global settings.*" $TARG | cut -d':' -f1` + 3))
    sed -i "${LINE_NUM}i${VAR} = []\n" $TARG
  fi
}

toml_array_write () {
  local TARG=$1
  local VAR=$2
  local VALUE=$3

  local LINE="`grep \"^$VAR = \" \"$TARG\"`"
  if [ "`echo $LINE | grep -F $VALUE`" ]; then
    echo -e "$INFO $VALUE is already set"
    return 0
  fi

  if [ "`echo $LINE|grep '\[\]$'`" ]; then
    LINE="${LINE%?}'$VALUE']"
  else
    LINE="${LINE%?}, '$VALUE']"
  fi

  LINE=$(_quote "$LINE")
  sed -i "/$VAR = /c\\$LINE" $TARG
}

toml_simple_var_write () {
  local TARG=$1
  local VAR=$2
  local VALUE=$3

  LINE_NUM_LAST=`awk '/^\[.*\]/ {print NR;exit}' $TARG`
  IDX_LINE="`grep -n \"$VAR = \" $TARG`"
  local TO=$(_quote "${VAR} = ${VALUE}")
  if [ "$IDX_LINE" ] && [ `echo $IDX_LINE|cut -d':' -f1` -lt $LINE_NUM_LAST ]; then
    sed -i "/$VAR = /c\\$TO" $TARG
  else
    LINE_NUM=$((`grep -n "#.*Global settings.*" $TARG | cut -d':' -f1` + 3))
    sed -i "${LINE_NUM}i$TO\n" $TARG
  fi
}

toml_var_disable () {
  local TARG=$1
  local VAR=$2

  LINE_NUM_LAST=`awk '/^\[.*\]/ {print NR;exit}' $TARG`
  IDX_LINE="`grep -n \"^$VAR = \" $TARG`"
  if [ "$IDX_LINE" ] && [ `echo $IDX_LINE|cut -d':' -f1` -lt $LINE_NUM_LAST ]; then
    sed -i "s/\(^$VAR = .*\)/# \1/" $TARG
  fi
}

yesno_query () {
  QUERY=$1
  YES_FUNC=$2
  NO_FUNC=$3
  echo -en "$INPUT $QUERY $BOLD[y/n]$NORM: "
  read YESNO
  case $YESNO in
    y|Y)
      eval $YES_FUNC
      ;;
    n|N)
      eval $NO_FUNC
      ;;
    *)
      echo -e "$ERROR Invalid input!"
      yesno_query "$@"
      ;;
  esac
}

uninst_dnscrypt () {
  local TARG=/jffs/dnscrypt
  echo -e "$INFO Uninstalling dnscrpt-proxy..."
  rm -f $TARG/dnscrypt-proxy $TARG/nonroot
  echo -e "$INFO Some configuration files are not removed in case you want to reinstall"
  end_op_message 0
}

write_conf () {
  local TARG=/jffs/dnscrypt/.config
  KEY="$1"
  VALUE="$2"
  [ -f /jffs/dnscrypt/.opendns-auth ] && mv /jffs/dnscrypt/.opendns-auth $TARG && chmod 644 $TARG
  if [ ! -f $TARG ]; then
    touch $TARG && chmod 644 $TARG
  fi
  if [ "`grep $KEY $TARG`" ]; then
    VALUE=$(_quote $2)
    sed -i "/^$KEY=/s/=.*/=$VALUE/" $TARG
  else
    echo "$KEY=$VALUE" >> $TARG
  fi
}

write_command_script () {
  local TARG=$1
  local COMMAND=$2
  FILENAME="`basename \"$TARG\"`"

  if [ ! -f $TARG ]; then
    echo -e "$INFO Creating $FILENAME file"
    echo "#!/bin/sh" > $TARG
  fi
  chmod 755 $TARG

  if [ `grep -c -F "$COMMAND" $TARG` -gt 0 ]; then
    echo -e "$INFO $FILENAME file already configured"
  else
    echo -e "$INFO Configure $FILENAME file"
    echo "$COMMAND" >> $TARG
  fi
}

write_manager_script () {
  local TARG=$1
  local OP=$2
  FILENAME="`basename \"$TARG\"`"
  COMMAND=/jffs/dnscrypt/manager

  if [ ! -f $TARG ]; then
    echo -e "$INFO Creating $FILENAME file"
    echo "#!/bin/sh" > $TARG
  fi
  chmod 755 $TARG $COMMAND
  del_between_magic $TARG dnscrypt-asuswrt-installer

  if [ `grep -c -F "[ -x $COMMAND ] && $COMMAND $OP" $TARG` -gt 0 ]; then
    echo -e "$INFO $FILENAME file already configured"
  else
    echo -e "$INFO Configure $FILENAME file for dnscrypt"
    if [ "`grep \"^$COMMAND\" $TARG`" ]; then
      sed -i "s~^$COMMAND~[ -x $COMMAND ] \&\& $COMMAND $OP~" $TARG
    else
      del_jffs_script $TARG x
      [ `tail -1 $TARG|grep -c '^$'` -eq 0 ] && echo "" >> $TARG
      echo "[ -x $COMMAND ] && $COMMAND $OP" >> $TARG
    fi
  fi
}

[ $1 ] && BRANCH=$1 || BRANCH=master
URL_GEN=https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/$BRANCH/gen
URL_ARCH=https://github.com/thuantran/dnscrypt-asuswrt-installer/raw/$BRANCH

case $(uname -m) in
  armv7l)
    URL_ARCH=$URL_ARCH/armv7
    DNSCRYPT_ARCH=linux_arm
    DNSCRYPT_ARCH_TAR=linux-arm
    echo -e "$INFO Detected ARMv7 architecture."
    ;;
  aarch64)
    URL_ARCH=$URL_ARCH/armv7
    DNSCRYPT_ARCH=linux_arm64
    DNSCRYPT_ARCH_TAR=linux-arm64
    echo -e "$INFO Detected ARMv8 architecture."
    ;;
  mips)
    URL_ARCH=$URL_ARCH/mips
    DNSCRYPT_ARCH=linux_mips
    DNSCRYPT_ARCH_TAR=linux-mips
    echo -e "$INFO Detected MIPSEL architecture."
    ;;
  *)
    echo "This is unsupported platform, sorry."
    exit 1
    ;;
esac

check_jffs_enabled
cleanup

menu () {
  echo -e "$INFO Choose what you want to do:"
  echo -e "  1) Install/Update dnscrypt-proxy"
  echo -e "  2) Uninstall dnscrypt-proxy"
  echo -e "  3) Configure dnscrypt-proxy"
  echo -e "  4) Configure timezone"
  echo -e "  5) Install (P)RNG"
  echo -e "  6) Install swap file"
  echo -e "  q) Quit"
  echo -en "$INPUT Please enter the number designates your selection: $NORM"
  read CHOSEN
  case $CHOSEN in
    1)
      echo -e "$INFO This operation will install dnscrypt-proxy and related files (<6MB)"
      echo -e "$INFO to jffs, no other data will be changed."
      echo -e "$INFO Also some start scripts will be installed/modified as required."
      echo
      yesno_query "Do you want to install dnscrypt-proxy to /jffs" inst_dnscrypt "menu"
      ;;
    2)
      echo -e "$INFO This operation will uninstall dnscrypt-proxy and related files"
      echo -e "$INFO from jffs, no other data will be changed."
      echo -e "$INFO Also some start scripts will be modified as required."
      echo
      yesno_query "Do you want to uninstall dnscrypt-proxy to /jffs" uninst_dnscrypt "menu"
      ;;
    3)
      echo -e "$INFO This operation allows you to configure dnscrypt-proxy"
      echo
      yesno_query "Do you want to proceed?" "setup_dnscrypt ; end_op_message 0" "menu"
      ;;
    4)
      echo -e "$INFO This operation allows you to configure your router"
      echo -e "$INFO timezone for background services and processes"
      echo
      yesno_query "Do you want to proceed?" setup_timezone "menu"
      ;;
    5)
      echo -e "$INFO This operation will install a (P)RNG (<0.5MB)"
      echo -e "$INFO to jffs, no other data will be changed."
      echo -e "$INFO Also some start scripts will be installed/modified as required."
      echo
      yesno_query "Do you want to install (P)RNG to /jffs" inst_random "menu"
      ;;
    6)
      echo -e "$INFO This operation will install a swap file for your device"
      echo -e "$INFO You need an external USB storage to host this file"
      echo
      yesno_query "Do you want to install a swap file (512MB on ext filesystem partition)?" check_swap "menu"
      ;;
    q|Q)
      echo -e "$INFO Please reboot your router if you have made any change!"
      exit 0
      ;;
    *)
      echo -e "$ERROR Invalid character entered!"
      menu
      ;;
  esac
}

menu
