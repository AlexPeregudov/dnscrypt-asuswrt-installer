#!/bin/sh

BOLD="\033[1m"
NORM="\033[0m"
INFO="$BOLD Info: $NORM"
ERROR="$BOLD *** Error: $NORM"
WARNING="$BOLD * Warning: $NORM"
INPUT="$BOLD => $NORM"

echo -e "$INFO This script will install dnscrypt-proxy and related files (~0.5MB)"
echo -e "$INFO to jffs, no other data will be changed."
echo -e "$INFO Also some start scripts will be installed/modified as required."
echo

URL_GEN=https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/gen
URL_ARCH=https://github.com/thuantran/dnscrypt-asuswrt-installer/raw/master

case $(uname -m) in
  armv7l)
    URL_ARCH=$URL_ARCH/armv7
    echo -e "$INFO Detected ARM architecture."
    echo
    ;;
  mips)
    URL_ARCH=$URL_ARCH/mips
    echo -e "$INFO Detected MIPSEL architecture."
    echo
    ;;
  *)
    echo "This is unsupported platform, sorry."
    exit 1
    ;;
esac

_quote() {
  echo $1 | sed 's/[]\/()$*.^|[]/\\&/g'
}

check_entware_installed () {
  if [ -z "`which opkg`" ]; then
    echo -e "$ERROR entware-ng is not installed"
    echo -e "$ERROR Please make sure you have an ext2/3/4 file system usb drive connected and install entware-ng with entware-setup.sh"
    echo -e "$ERROR or following this guide https://www.hqt.ro/how-to-install-new-generation-entware/"
    echo -e "$ERROR then try this again. Exiting..."
    exit 1
  fi
}

check_jffs_enabled () {
  if [ "`nvram get jffs2_format`" == "1" ]; then
    echo -e "$ERROR JFFS partition is scheduled to be reformatted"
    echo -e "$ERROR Please reboot to format or disable that setting and try again. Exiting..."
    exit 1
  fi

  JFFS2_ENABLED=`nvram get jffs2_enable`
  JFFS2_SCRIPTS=`nvram get jffs2_scripts`

  if [ $JFFS2_ENABLED -ne 1 ] || [ $JFFS2_SCRIPTS -ne 1 ]; then
    echo -e "$INFO JFFS custom scripts and configs are not enabled. Enabling them"
    nvram set jffs2_enable=1
    nvram set jffs2_scripts=1
    nvram commit
  else
    echo -e "$INFO JFFS custom scripts and configs are already enabled"
  fi
}

check_install_dnscrypt () {
  opkg update
  PKGS="`opkg list-installed`"
  if [ -z "`echo $PKGS|grep nonroot`" ]; then
    opkg install nonroot
    if [ $? -ne 0 ]; then
      echo -e "$ERROR Unable to install nonroot. Exiting..."
      exit 1
    fi
  else
    echo -e "$INFO nonroot already exists, do nothing"
  fi
  if [ -z "`echo $PKGS|grep dnscrypt-proxy`" ]; then
    opkg install dnscrypt-proxy
    if [ $? -ne 0 ]; then
      echo -e "$ERROR Unable to install dnscrypt-proxy. Exiting..."
      exit 1
    fi
    DNS_ENT="`cat /opt/etc/init.d/*dnscrypt*|grep ^ARGS=|awk 'NF>1{print $NF}'`"
    DNS_ENT=${DNS_ENT%?}
  else
    echo -e "$INFO dnscrypt-proxy already exists, do nothing"
  fi
  chmod 000 /opt/etc/init.d/*dnscrypt*
}

del_between_magic () {
  local TARG=$1
  MAGIC=$2
  BOUNDS=`grep -n -F "$MAGIC" $TARG|cut -d':' -f1|tr '\n' ','`
  if [ "$BOUNDS" ]; then
    sed -i "${BOUNDS%,}d" $TARG
  fi
}

download_file () {
  cd "$1"
  shift
  PERM="$1"
  shift

  for URL in "$@"; do
    FILENAME="`basename $URL`"
    MD5SUM_OLD="`[ -f $FILENAME ] && md5sum $FILENAME|cut -d' ' -f1`"
    MD5SUM_CURR="`curl -L -k -s \"${URL}.md5sum\"`"
    if [ "$MD5SUM_CURR" ==  "$MD5SUM_OLD" ]; then
      echo -e "$INFO $FILENAME is up to date. Skipping..."
    else
      echo -e "$INFO Downloading $FILENAME"
      curl -L -k -s -O "$URL" && chmod $PERM $FILENAME
    fi
  done
}

write_conf () {
  local TARG=/jffs/dnscrypt/.config
  KEY="$1"
  VALUE="$2"
  [ -f /jffs/dnscrypt/.opendns-auth ] && mv /jffs/dnscrypt/.opendns-auth $TARG && chmod 644 $TARG
  if [ ! -f $TARG ]; then
    touch $TARG && chmod 644 $TARG
  fi
  if [ "`grep $KEY $TARG`" ]; then
    VALUE=$(_quote $2)
    sed -i "/^$KEY=/s/=.*/=$VALUE/" $TARG
  else
    echo "$KEY=$VALUE" >> $TARG
  fi
}

write_jffs_script () {
  local TARG=$1
  FILENAME="`basename \"$TARG\"`"
  COMMAND=$2

  if [ ! -f $TARG ]; then
    echo -e "$INFO Creating $FILENAME file"
    echo "#!/bin/sh" > $TARG
  fi
  chmod 755 $TARG $COMMAND
  del_between_magic $TARG dnscrypt-asuswrt-installer

  if [ `grep -c -F "[ -x $COMMAND ] && $COMMAND" $TARG` -gt 0 ]; then
    echo -e "$INFO $FILENAME file already configured"
  else
    echo -e "$INFO Configure $FILENAME file for dnscrypt"
    if [ "`grep \"^$COMMAND\" $TARG`" ]; then
      sed -i "s~^$COMMAND~[ -x $COMMAND ] \&\& $COMMAND~" $TARG
    else
      echo "" >> $TARG
      echo "[ -x $COMMAND ] && $COMMAND" >> $TARG
    fi
  fi
}

yesno_query () {
  QUERY=$1
  YES_FUNC=$2
  NO_FUNC=$3
  echo -en "$INPUT $QUERY $BOLD[y/n]$NORM: "
  read YESNO
  case $YESNO in
    y|Y)
      eval $YES_FUNC
      ;;
    n|N)
      eval $NO_FUNC
      ;;
    *)
      echo -e "$ERROR Invalid input!"
      yesno_query "$@"
      ;;
  esac
}

choose_dnscrypt_server () {
  if [ $1 -eq 1 ] && [ -z $2 ]; then
    [ -z "$DNS_ENT" ] && echo -e "$INFO Available DNS servers: "
    INDEX=0
    while read LINE; do
      if [ $INDEX -eq 0 ]; then
        INDEX=1
        continue
      fi
      SERVER="`echo $LINE|cut -d',' -f1,2,3|sed 's/,/: /'`"
      [ -z "$DNS_ENT" ] && echo -e "  $INDEX) $SERVER"
      SERVER="`echo $SERVER | cut -d':' -f1`"
      eval "ITEM$INDEX=$SERVER"
      INDEX=$((INDEX+1))
    done < /opt/share/dnscrypt-proxy/dnscrypt-resolvers.csv
    if [ "$DNS_ENT" ]; then
      echo -e "$INFO Use selected DNS server during dnscrypt-proxy installation"
      write_conf DNS$1 "$DNS_ENT"
      [ "`echo $DNS_ENT | grep cisco`" ] && CISCO_ENABLED=1
      choose_dnscrypt_server 2
      return
    else
      echo -en "$INPUT Please choose DNS server\n$BOLD[1-`expr $INDEX - 1`]$NORM: "
    fi
  elif [ $1 -eq 2 ] && [ -z $2 ]; then
    echo -en "$INPUT Please choose 2nd DNS server or press n to skip\n$BOLD[1-`expr $INDEX - 1`/n]$NORM: "
  fi
  read TMP
  if [ $1 -eq 2 ] && [ "$TMP" == "$CHOSEN" ]; then
    echo -e "$ERROR Duplicate selection! Retrying..."
    choose_dnscrypt_server $1 x
    return
  fi
  CHOSEN=$TMP
  if [ $1 -eq 2 ] && [ $CHOSEN == "n" ]; then
    write_conf DNS$1 ""
    return
  fi
  if [ -z "`echo $CHOSEN | grep -E '^[0-9]+$'`" ]; then
    echo -e "$ERROR Invalid character entered! Retrying..."
    choose_dnscrypt_server $1 x
    return
  fi
  if [ $CHOSEN -lt 1 ] || [ $CHOSEN -gt `expr $INDEX - 1` ] ; then
    echo -e "$ERROR Chosen DNS server number is not in range! Retrying..."
    choose_dnscrypt_server $1 x
    return
  fi

  eval ITEM="\$ITEM$CHOSEN"
  write_conf DNS$1 "$ITEM"
  [ "`echo $ITEM | grep cisco`" ] && CISCO_ENABLED=1
  [ $1 -eq 1 ] && choose_dnscrypt_server 2
}

inst_ip_update () {
  if [ "$1" -eq 0 ]; then
    write_conf OPENDNS_USER ""
    write_conf OPENDNS_PASSWORD ""
    return
  fi
  echo -en "$INPUT Please enter OpenDNS username$NORM: "
  read -r USERNAME
  echo -en "$INPUT Please enter OpenDNS password$NORM: "
  read -r PW1
  echo -en "$INPUT Please reenter OpenDNS password$NORM: "
  read -r PW2
  if [ "$PW1" != "$PW2" ]; then
    echo -e "$ERROR Password entered incorrectly! Exiting..."
    exit 1
  fi

  write_conf OPENDNS_USER "\"$USERNAME\""
  write_conf OPENDNS_PASSWORD "\"$PW1\""
}

inst_dnscrypt () {
  check_jffs_enabled
  check_entware_installed
  check_install_dnscrypt

  local TARG=/jffs/dnscrypt
  mkdir -p $TARG
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to create $TARG! Exiting..."
    exit 1
  fi

  download_file $TARG 755 $URL_GEN/dnsmasq-dnscrypt-reconfig $URL_GEN/dnscrypt-fw-rules $URL_GEN/dnscrypt-start $URL_ARCH/haveged
  rm -rf $TARG/dnscrypt-proxy $TARG/nonroot

  write_jffs_script /jffs/scripts/wan-start $TARG/dnscrypt-start
  write_jffs_script /jffs/scripts/dnsmasq.postconf $TARG/dnsmasq-dnscrypt-reconfig

  choose_dnscrypt_server 1
  [ "$CISCO_ENABLED" == "1" ] && yesno_query "Do you want to set up OpenDNS account ip update" "inst_ip_update 1" "inst_ip_update 0" || inst_ip_update 0
  yesno_query "Do you want to redirect all DNS resolutions on your network through dnscrypt?" "write_jffs_script /jffs/scripts/firewall-start $TARG/dnscrypt-fw-rules" "chmod 000 $TARG/dnscrypt-fw-rules"

  echo -e "$INFO dnscrypt setup completed!"
  echo -e "$INFO Please reboot your router for the changes to take effect!"
}

yesno_query "Do you want to install dnscrypt-proxy to /jffs" inst_dnscrypt "exit 0"
