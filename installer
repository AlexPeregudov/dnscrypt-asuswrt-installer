#!/bin/sh

DNSCRYPT_VER=2.0.0beta11

BOLD="\033[1m"
NORM="\033[0m"
INFO="$BOLD Info: $NORM"
ERROR="$BOLD *** Error: $NORM"
WARNING="$BOLD * Warning: $NORM"
INPUT="$BOLD => $NORM"

_quote() {
  echo $1 | sed 's/[]\/()$*.^|[]/\\&/g'
}

check_jffs_enabled () {
  if [ "`nvram get jffs2_format`" == "1" ]; then
    echo -e "$ERROR JFFS partition is scheduled to be reformatted"
    echo -e "$ERROR Please reboot to format or disable that setting and try again. Exiting..."
    exit 1
  fi

  JFFS2_ENABLED=`nvram get jffs2_enable`
  JFFS2_SCRIPTS=`nvram get jffs2_scripts`

  if [ $JFFS2_ENABLED -ne 1 ] || [ $JFFS2_SCRIPTS -ne 1 ]; then
    echo -e "$INFO JFFS custom scripts and configs are not enabled. Enabling them"
    nvram set jffs2_enable=1
    nvram set jffs2_scripts=1
    nvram commit
  else
    echo -e "$INFO JFFS custom scripts and configs are already enabled"
  fi
}

check_swap () {
  SWAP_SIZE=`cat /proc/meminfo | grep SwapTotal | awk '{print $2}'`
  if [ $SWAP_SIZE -gt 0 ]; then
    echo -e "$INFO Swap file is already setup"
    end_op_message 0
    return
  fi

  inst_swap
}

choose_dnscrypt_server () {
  local TARG=/jffs/dnscrypt/dnscrypt-proxy.toml
  if [ "$1" == "1" ] && [ -z $2 ]; then
    toml_array_clean $TARG server_names
    echo -e "$INFO Available DNS servers: "
    awk '/^## /{printf "  ";printf ++i ") " $2": " ;getline;print}' /jffs/dnscrypt/public-resolvers.md
    INDEX=$((`grep -c "^## " /jffs/dnscrypt/public-resolvers.md` + 1))
    echo "  $INDEX) google: Google DNS over HTTP/2 server"
  fi
  case $1 in
    1)
      echo -en "$INPUT Please choose DNS server $BOLD[1-$INDEX]$NORM: "
      ;;
    *)
      echo -en "$INPUT Please choose next DNS server or press n to stop $BOLD[1-$INDEX/n]$NORM: "
      ;;
  esac
  read CHOSEN
  if [ "$1" != "1" ] && [ $CHOSEN == "n" ]; then
    return 0
  fi
  if [ -z "`echo $CHOSEN | grep -E '^[0-9]+$'`" ]; then
    echo -e "$ERROR Invalid character entered! Retrying..."
    choose_dnscrypt_server $1 x
    return
  fi
  if [ $CHOSEN -lt 1 ] || [ $CHOSEN -gt $INDEX ] ; then
    echo -e "$ERROR Chosen DNS server number is not in range! Retrying..."
    choose_dnscrypt_server $1 x
    return
  fi

  if [ $CHOSEN -lt $INDEX ]; then
    ITEM=`awk -v INDEX=$CHOSEN '/^## /{i++} i==INDEX {print $2;exit}' /jffs/dnscrypt/public-resolvers.md`
  else
    ITEM=google
  fi

  toml_array_write $TARG server_names $ITEM

  [ "`echo $ITEM | grep cisco`" ] && CISCO_ENABLED=1
  choose_dnscrypt_server n
}

cleanup () {
  local TARG=/jffs/dnscrypt
  rm -f $TARG/dnscrypt-fw-rules $TARG/dnscrypt-start $TARG/dnsmasq-dnscrypt-reconfig $TARG/fake-hwclock* $TARG/init-start $TARG/services-stop
}

create_dir () {
  mkdir -p "$1"
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to create $1!"
    return 1
  fi
}

del_between_magic () {
  local TARG=$1
  MAGIC=$2
  BOUNDS=`grep -n -F "$MAGIC" $TARG|cut -d':' -f1|tr '\n' ','`
  if [ "$BOUNDS" ]; then
    sed -i "${BOUNDS%,}d" $TARG
  fi
}

del_jffs_script () {
  local TARG=$1
  local OP=$2
  if [ "$3" == "x" ]; then
    LINE_NUM=`grep -n -F "[ -x /jffs/dnscrypt/" $TARG|grep -v manager|cut -d':' -f1`
  else
    LINE_NUM=`grep -n -F "[ -x /jffs/dnscrypt/" $TARG|cut -d':' -f1`
  fi
  [ -z $LINE_NUM ] && return
  sed -i "${LINE_NUM}d" $TARG
  if [ $LINE_NUM -gt 1 ]; then
    LINE_NUM=$((LINE_NUM-1))
    LINE_ABOVE=`sed "$LINE_NUMq;d" $TARG`
    [ -z "$LINE_ABOVE" ] && sed -i "${LINE_NUM}d" $TARG
  fi
}

download_file () {
  cd "$1"
  shift
  PERM="$1"
  shift

  for URL in "$@"; do
    FILENAME="`basename $URL`"
    MD5SUM_OLD="`[ -f $FILENAME ] && md5sum $FILENAME|cut -d' ' -f1`"
    MD5SUM_CURR="`curl -L -k -s \"${URL}.md5sum\"`"
    if [ "$MD5SUM_CURR" ==  "$MD5SUM_OLD" ]; then
      echo -e "$INFO $FILENAME is up to date. Skipping..."
    else
      echo -e "$INFO Downloading $FILENAME"
      curl -L -k -s -O "$URL" && chmod $PERM $FILENAME
    fi
  done
}

end_op_message () {
  [ "$1" == "0" ] && echo -e "$INFO Operation completed. You can quit or continue"
  echo =====================================================
  echo
  echo
  menu
}

inst_dnscrypt () {
  local DNSCRYPT_TAR=dnscrypt-proxy-${DNSCRYPT_ARCH}-${DNSCRYPT_VER}.tar.gz
  local RESOLVERS_URL_PREFIX="http://download.dnscrypt.info/resolvers-list/v2"
  local TARG=/jffs/dnscrypt
  create_dir $TARG || end_op_message

  download_file $TARG 644 https://github.com/jedisct1/dnscrypt-proxy/releases/download/${DNSCRYPT_VER}/${DNSCRYPT_TAR} \
    $RESOLVERS_URL_PREFIX/public-resolvers.md \
    $RESOLVERS_URL_PREFIX/public-resolvers.md.minisig
  tar xzv -C $TARG -f $TARG/$DNSCRYPT_TAR
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to download dnscrypt-proxy package for your device"
    end_op_message
    return 1
  fi
  chown admin:root $TARG/$DNSCRYPT_ARCH_TAR/*
  mv $TARG/$DNSCRYPT_ARCH_TAR/* $TARG
  rm -r $TARG/$DNSCRYPT_ARCH_TAR $TARG/$DNSCRYPT_TAR
  chmod 755 $TARG/dnscrypt-proxy
  preset_dnscrypt_settings
  choose_dnscrypt_server 1

  download_file $TARG 755 $URL_GEN/manager $URL_ARCH/nonroot
  write_manager_script /jffs/scripts/dnsmasq.postconf dnsmasq
  write_manager_script /jffs/scripts/wan-start dnscrypt-start
  [ "$CISCO_ENABLED" == "1" ] && yesno_query "Do you want to set up OpenDNS account ip update" "inst_ip_update 1" "inst_ip_update 0" || inst_ip_update 0
  yesno_query "Do you want to redirect all DNS resolutions on your network through dnscrypt?" "write_manager_script /jffs/scripts/firewall-start fw-rules" "del_jffs_script /jffs/scripts/firewall-start fw-rules"

  echo -e "$INFO Install a (P)RNG for better cryptographic operations"
  inst_random
}

inst_ip_update () {
  if [ "$1" -eq 0 ]; then
    write_conf OPENDNS_USER ""
    write_conf OPENDNS_PASSWORD ""
    return
  fi
  echo -en "$INPUT Please enter OpenDNS username$NORM: "
  read -r USERNAME
  echo -en "$INPUT Please enter OpenDNS password$NORM: "
  read -rs PW1
  echo
  echo -en "$INPUT Please reenter OpenDNS password$NORM: "
  read -rs PW2
  echo
  if [ "$PW1" != "$PW2" ]; then
    echo -e "$ERROR Password entered incorrectly!"
    inst_ip_update $1
  fi

  write_conf OPENDNS_USER "\"$USERNAME\""
  write_conf OPENDNS_PASSWORD "\"$PW1\""
}

inst_random () {
  local TARG=/jffs/dnscrypt
  create_dir $TARG

  if [ -z $1 ]; then
    echo -e "$INFO Available random number generator providers:"
    echo -e "  1) HAVEGED (Preferred if you do not have a HW RNG)"
    echo -e "  2) RNGD (Preferred if you have a HW RNG)"
  fi
  echo -e "$INFO If you choose a HW RNG, please have it plugged in now before"
  echo -e "$INFO proceeding with your selection."
  echo -en "$INPUT Please enter the number designates your selection$NORM: "
  read CHOSEN
  case $CHOSEN in
    1)
      rm -f rngd stty
      download_file $TARG 755 $URL_ARCH/haveged $URL_GEN/manager
      write_conf RAN_PRV haveged
      ;;
    2)
      rm -f haveged
      download_file $TARG 755 $URL_ARCH/rngd $URL_ARCH/stty $URL_GEN/manager
      inst_ran_dev || return
      write_conf RAN_PRV rngd
      ;;
    *)
      echo -e "$ERROR Invalid character entered! Retrying..."
      inst_random x
      return
      ;;
  esac

  write_manager_script /jffs/scripts/init-start init-start
  write_manager_script /jffs/scripts/services-stop services-stop
  end_op_message 0
}

inst_ran_dev () {
  if [ -c /dev/ttyACM0 ]; then
    PRODSTR=`cat /sys/class/tty/ttyACM0/device/uevent | grep ^PRODUCT\=`
    VID=`echo $PRODSTR | cut -d '=' -f 2 | cut -d '/' -f 1`
    PID=`echo $PRODSTR | cut -d '=' -f 2 | cut -d '/' -f 2`
    if [ "$VID" == "4d8" ] && [ "$PID" == "f5fe" ]; then
      echo -e "$INFO Found TrueRNG USB HW RNG"
      RNG_DEV=ttyACM0
    fi
    if [ "$VID" == "16d0" ] && [ "$PID" == "aa0" ]; then
      echo -e "$INFO Found TrueRNGpro USB HW RNG"
      RNG_DEV=ttyACM0
    fi
    if [ "$VID" == "1d50" ] && [ "$PID" == "6086" ]; then
      echo -e "$INFO Found OneRNG USB HW RNG"
      RNG_DEV=ttyACM0
    fi
    if [ "$VID" == "20df" ] && [ "$PID" == "1" ]; then
      echo -e "$INFO Found EntropyKey USB HW RNG"
      RNG_DEV=ttyACM0
    fi
  fi

  if [ -z $RNG_DEV ]; then
    echo -e "$ERROR Unable to find any HW RNG device! Retrying..."
    inst_random x
    return 1
  fi
  write_conf RNG_DEV "/dev/$RNG_DEV"
}

inst_swap () {
  local PARTITIONS

  SWAP_SIZE=524288
  USB_COUNT=`find /tmp/mnt/ -maxdepth 1 -type d|wc -l`
  if [ $USB_COUNT -le 1 ]; then
    echo -e "$ERROR Unable to find any external USB storage"
    end_op_message
    return 1
  fi

  for MOUNT in /mnt/*/; do
    MOUNT_FS=`df -T "$MOUNT"|awk 'FNR==2 {print $2}'`
    MOUNT_FREE=`df -T "$MOUNT"|awk 'FNR==2 {print $5}'`

    if [ ${MOUNT_FS%?} == "ext" ] && [ $MOUNT_FREE -gt $(($SWAP_SIZE * 2)) ]; then
      SWAP_OK=1
      PARTITIONS="$PARTITIONS $MOUNT"
    fi
  done

  if [ -z SWAP_OK ]; then
    echo -e "$ERROR No suitable external USB storage found"
    echo -e "$ERROR Please connect a USB storage with ext filesystem with enough free space"
    end_op_message
    return 1
  fi

  echo -e "$INFO Available partition to install swap file:$NORM"
  INDEX=1
  for MOUNT in $PARTITIONS; do
    echo "$INDEX) $MOUNT"
    eval "ITEM$INDEX=$MOUNT"
    INDEX=$((INDEX+1))
  done
  echo -en "$INPUT Please select the partition to install swap file:$NORM "
  read CHOSEN
  if [ -z "`echo $CHOSEN | grep -E '^[0-9]+$'`" ]; then
    echo -e "$ERROR Invalid character entered! Retrying..."
    inst_swap
    return
  fi
  if [ $CHOSEN -lt 1 ] || [ $CHOSEN -gt `expr $INDEX - 1` ] ; then
    echo -e "$ERROR Chosen partition number is not in range! Retrying..."
    inst_swap
    return
  fi

  unset MOUNT
  eval MOUNT="\$ITEM$CHOSEN"
  if  [ -z $MOUNT ]; then
    echo -e "$ERROR Unable to set partition to store swap file"
    end_op_message
    return 1
  fi
  echo -e "$INFO Please wait..."
  dd if=/dev/zero of=$MOUNT/swap bs=1024 count=$SWAP_SIZE
  chmod 600 $MOUNT/swap
  mkswap $MOUNT/swap

  write_command_script /jffs/scripts/post-mount '[ -f $1/swap ] && swapon $1/swap'
  write_command_script /jffs/scripts/unmount '[ -f $1/swap ] && swapoff $1/swap'
  end_op_message 0
}

preset_dnscrypt_settings () {
  local TARG=/jffs/dnscrypt/dnscrypt-proxy.toml

  toml_var_write $TARG listen_addresses "['127.0.0.1:65053']"
  toml_var_write $TARG require_nolog "false"
  toml_var_write $TARG require_nofilter "false"
  # toml_var_write $TARG log_level "4"
  toml_var_write $TARG use_syslog "true"
  toml_var_write $TARG cache "false"
  toml_var_write $TARG cert_ignore_timestamp "true"
}

toml_array_clean () {
  sed -i "/$2 = /c\\$2 = []" $1
}

toml_array_write () {
  local TARG=$1
  local VAR=$2
  local VALUE=$3

  local LINE="`grep -F $VAR \"$TARG\"`"
  if [ "`echo $LINE | grep -F $VALUE "$TARG"`" ]; then
    echo -e "$INFO $VALUE is already set"
    return 0
  fi

  CHAR_BEF_INDEX=$((${#LINE}-2))
  if [ "${LINE:$CHAR_BEF_INDEX:1}" == '[' ]; then
    LINE="${LINE%?}'$VALUE']"
  else
    LINE="${LINE%?}, '$VALUE']"
  fi

  sed -i "/$VAR = /c\\$LINE" $TARG
}

toml_var_write () {
  local TARG=$1
  local VAR=$2
  local VALUE=$3

  if [ "`grep $VAR $TARG`" ]; then
    sed -i "/$VAR = /c\\$VAR = $VALUE" $TARG
  else
    echo "" >> $TARG
    echo "$VAR = $VALUE" >> $TARG
  fi
}

yesno_query () {
  QUERY=$1
  YES_FUNC=$2
  NO_FUNC=$3
  echo -en "$INPUT $QUERY $BOLD[y/n]$NORM: "
  read YESNO
  case $YESNO in
    y|Y)
      eval $YES_FUNC
      ;;
    n|N)
      eval $NO_FUNC
      ;;
    *)
      echo -e "$ERROR Invalid input!"
      yesno_query "$@"
      ;;
  esac
}

write_conf () {
  local TARG=/jffs/dnscrypt/.config
  KEY="$1"
  VALUE="$2"
  [ -f /jffs/dnscrypt/.opendns-auth ] && mv /jffs/dnscrypt/.opendns-auth $TARG && chmod 644 $TARG
  if [ ! -f $TARG ]; then
    touch $TARG && chmod 644 $TARG
  fi
  if [ "`grep $KEY $TARG`" ]; then
    VALUE=$(_quote $2)
    sed -i "/^$KEY=/s/=.*/=$VALUE/" $TARG
  else
    echo "$KEY=$VALUE" >> $TARG
  fi
}

write_command_script () {
  local TARG=$1
  local COMMAND=$2
  FILENAME="`basename \"$TARG\"`"

  if [ ! -f $TARG ]; then
    echo -e "$INFO Creating $FILENAME file"
    echo "#!/bin/sh" > $TARG
  fi
  chmod 755 $TARG

  if [ `grep -c -F "$COMMAND" $TARG` -gt 0 ]; then
    echo -e "$INFO $FILENAME file already configured"
  else
    echo -e "$INFO Configure $FILENAME file"
    echo "$COMMAND" >> $TARG
  fi
}

write_manager_script () {
  local TARG=$1
  local OP=$2
  FILENAME="`basename \"$TARG\"`"
  COMMAND=/jffs/dnscrypt/manager

  if [ ! -f $TARG ]; then
    echo -e "$INFO Creating $FILENAME file"
    echo "#!/bin/sh" > $TARG
  fi
  chmod 755 $TARG $COMMAND
  del_between_magic $TARG dnscrypt-asuswrt-installer

  if [ `grep -c -F "[ -x $COMMAND ] && $COMMAND $OP" $TARG` -gt 0 ]; then
    echo -e "$INFO $FILENAME file already configured"
  else
    echo -e "$INFO Configure $FILENAME file for dnscrypt"
    if [ "`grep \"^$COMMAND\" $TARG`" ]; then
      sed -i "s~^$COMMAND~[ -x $COMMAND ] \&\& $COMMAND $OP~" $TARG
    else
      del_jffs_script $TARG $OP x
      [ `tail -1 $TARG|grep -c '^$'` -eq 0 ] && echo "" >> $TARG
      echo "[ -x $COMMAND ] && $COMMAND $OP" >> $TARG
    fi
  fi
}

[ $1 ] && BRANCH=$1 || BRANCH=master
URL_GEN=https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/$BRANCH/gen
URL_ARCH=https://github.com/thuantran/dnscrypt-asuswrt-installer/raw/$BRANCH

case $(uname -m) in
  armv7l)
    URL_ARCH=$URL_ARCH/armv7
    DNSCRYPT_ARCH=linux_arm
    DNSCRYPT_ARCH_TAR=linux-arm
    echo -e "$INFO Detected ARMv7 architecture."
    ;;
  aarch64)
    URL_ARCH=$URL_ARCH/armv7
    DNSCRYPT_ARCH=linux_arm64
    DNSCRYPT_ARCH_TAR=linux-arm64
    echo -e "$INFO Detected ARMv8 architecture."
    ;;
  mips)
    URL_ARCH=$URL_ARCH/mips
    DNSCRYPT_ARCH=linux_mips
    DNSCRYPT_ARCH_TAR=linux-mips
    echo -e "$INFO Detected MIPSEL architecture."
    ;;
  *)
    echo "This is unsupported platform, sorry."
    exit 1
    ;;
esac

check_jffs_enabled
cleanup

menu () {
  echo -e "$INFO Choose what you want to do:"
  echo -e "  1) Install dnscrypt and (P)RNG"
  echo -e "  2) Install (P)RNG only"
  echo -e "  3) Install swap file"
  echo -e "  q) Quit"
  echo -en "$INPUT Please enter the number designates your selection: $NORM"
  read CHOSEN
  case $CHOSEN in
    1)
      echo -e "$INFO This operation will install dnscrypt-proxy and related files (<6MB)"
      echo -e "$INFO to jffs, no other data will be changed."
      echo -e "$INFO Also some start scripts will be installed/modified as required."
      echo
      yesno_query "Do you want to install dnscrypt-proxy to /jffs" inst_dnscrypt "menu"
      ;;
    2)
      echo -e "$INFO This operation will install a (P)RNG (<0.5MB)"
      echo -e "$INFO to jffs, no other data will be changed."
      echo -e "$INFO Also some start scripts will be installed/modified as required."
      echo
      yesno_query "Do you want to install (P)RNG to /jffs" inst_random "menu"
      ;;
    3)
      echo -e "$INFO For dnscrypt-proxy version 2 to work reliably, a swap file is recommended"
      echo -e "$INFO You need an external USB storage to host this file"
      echo
      yesno_query "Do you want to install a swap file (512MB on ext filesystem partition)?" check_swap "menu"
      ;;
    q|Q)
      echo -e "$INFO Please reboot your router if you have made any change!"
      exit 0
      ;;
    *)
      echo -e "$ERROR Invalid character entered!"
      menu
      ;;
  esac
}

menu
