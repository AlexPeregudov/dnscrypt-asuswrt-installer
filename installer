#!/bin/sh

BOLD="\033[1m"
NORM="\033[0m"
INFO="$BOLD Info: $NORM"
ERROR="$BOLD *** Error: $NORM"
WARNING="$BOLD * Warning: $NORM"
INPUT="$BOLD => $NORM"

echo -e "$INFO This script will install dnscrypt-proxy and related files (~0.5MB)"
echo -e "$INFO to jffs, no other data will be changed."
echo -e "$INFO Also some start scripts will be installed/modified as required."
echo

URL_GEN=https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/gen
URL_ARCH=https://github.com/thuantran/dnscrypt-asuswrt-installer/raw/master

case $(uname -m) in
  armv7l)
    URL_ARCH=$URL_ARCH/armv7
    echo -e "$INFO Detected ARM architecture."
    echo
    ;;
  mips)
    URL_ARCH=$URL_ARCH/mips
    echo -e "$INFO Detected MIPSEL architecture."
    echo
    ;;
  *)
    echo "This is unsupported platform, sorry."
    exit 1
    ;;
esac

del_between_magic () {
  local TARG=$1
  MAGIC=$2
  BOUNDS=`grep -n -F "$MAGIC" $TARG|cut -d':' -f1|xargs|tr ' ' ','`
  if [ "$BOUNDS" ]; then
    sed -i "${BOUNDS}d" $TARG
  fi
}

download_file () {
  cd "$1"
  shift
  PERM="$1"
  shift

  for URL in "$@"; do
    FILENAME="`basename $URL`"
    MD5SUM_OLD="`md5sum $FILENAME`"
    MD5SUM_CURR="`curl -L -k -s -O \"${URL}.md5sum\"`"
    if [ "$MD5SUM_CURR" ==  "$MD5SUM_OLD" ]; then
      echo -e "$INFO $FILENAME is up to date. Skipping..."
    else
      echo -e "$INFO Downloading $FILENAME"
      curl -L -k -s -O "$URL" && chmod $PERM $FILENAME
    fi
  done
}

write_jffs_script () {
  local TARG=$1
  FILENAME="`basename \"$TARG\"`"
  COMMAND="$2"

  if [ ! -f $TARG ]; then
    echo -e "$INFO Creating $FILENAME file"
    echo "#!/bin/sh" > $TARG
  fi
  chmod 755 $TARG
  del_between_magic $TARG dnscrypt-asuswrt-installer

  if [ `grep -c -F "[ -x $COMMAND ] && $COMMAND" $TARG` -gt 0 ]; then
    echo -e "$INFO $FILENAME file already configured"
  else
    echo -e "$INFO Configure $FILENAME file for dnscrypt"
    if [ "`grep \"^$COMMAND\" $TARG`" ]; then
      sed -i "s~^$COMMAND~[ -x $COMMAND ] \&\& $COMMAND~" $TARG
    else
      echo "" >> $TARG
      echo "[ -x $COMMAND ] && $COMMAND" >> $TARG
    fi
  fi
}

yesno_query () {
  QUERY=$1
  YES_FUNC=$2
  NO_FUNC=$3
  echo -en "$INPUT $QUERY $BOLD[y/n]$NORM: "
  read YESNO
  case $YESNO in
    y|Y)
      eval $YES_FUNC
      ;;
    n|N)
      eval $NO_FUNC
      ;;
    *)
      echo -e "$ERROR Invalid input!"
      yesno_query "$@"
      ;;
  esac
}

inst_ip_update () {
  echo -en "$INPUT Please enter OpenDNS username$NORM: "
  read -r USERNAME
  echo -en "$INPUT Please enter OpenDNS password$NORM: "
  read -r PW1
  echo -en "$INPUT Please reenter OpenDNS password$NORM: "
  read -r PW2
  if [ "$PW1" != "$PW2" ]; then
    echo -e "$ERROR Password entered incorrectly! Exiting..."
    exit 1
  fi

  local TARG=/jffs/dnscrypt/.opendns-auth
  echo "OPENDNS_USER=\"$USERNAME\"" > $TARG
  echo "OPENDNS_PASSWORD=\"$PW1\"" >> $TARG
}

inst_dnscrypt () {
  local TARG=/jffs/dnscrypt
  rm -rf $TARG
  mkdir -p $TARG
  if [ $? -ne 0 ]; then
    echo -e "$ERROR Unable to create $TARG! Exiting..."
    exit 1
  fi

  download_file $TARG 644 https://raw.githubusercontent.com/jedisct1/dnscrypt-proxy/master/dnscrypt-resolvers.csv
  download_file $TARG 755 $URL_GEN/dnsmasq-dnscrypt-reconfig $URL_GEN/dnscrypt-fw-rules $URL_GEN/dnscrypt-start $URL_ARCH/dnscrypt-proxy $URL_ARCH/nonroot

  write_jffs_script /jffs/scripts/wan-start $TARG/dnscrypt-start
  write_jffs_script /jffs/scripts/dnsmasq.postconf $TARG/dnsmasq-dnscrypt-reconfig

  yesno_query "Do you want to set up OpenDNS account ip update" inst_ip_update
  yesno_query "Do you want to redirect all DNS resolutions on your network through dnscrypt" "write_jffs_script /jffs/scripts/firewall-start $TARG/dnscrypt-fw-rules" "rm -rf $TARG/.opendns-auth"

  echo -e "$INFO dnscrypt setup completed!"
  echo -e "$INFO Please reboot your router for the changes to take effect!"
}

yesno_query "Do you want to install dnscrypt-proxy to /jffs" inst_dnscrypt
